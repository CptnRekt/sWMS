using sWMS.DAO;
using sWMS.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace sWMS.Windows
{
    /// <summary>
    /// Interaction logic for Attributes.xaml
    /// </summary>
    public partial class MainPanel : Window
    {
        ObservableCollection<Document> documents;
        ObservableCollection<Warehouse> warehouses;
        ObservableCollection<Contractor> contractors;
        ObservableCollection<Article> articles;
        ObservableCollection<Unit> units;
        ObservableCollection<AttrClass> attrClasses;
        ObservableCollection<Config> config;


        public MainPanel()
        {
            DataAccess.InitializeConnection("(LocalDB)\\MSSQLLocalDB", "sa", "Rambo846303", "sWMS");
            //documents = new ObservableCollection<Document>(Procedures.GetDocuments());
            warehouses = new ObservableCollection<Warehouse>(Procedures.GetWarehouses());
            //contractors = new ObservableCollection<Contractor>(Procedures.GetContractors());
            //articles = new ObservableCollection<Article>(Procedures.GetArticles());
            //units = new ObservableCollection<Article>(Procedures.GetUnits());
            //attrClasses = new ObservableCollection<AttrClass>(Procedures.GetAttrClasses());
            //config = new ObservableCollection<Config>(Procedures.GetConfig());
            InitializeComponent();
            DocumentsDataGrid.DataContext = documents;
            WarehousesDataGrid.DataContext = warehouses;
            ContractorsDataGrid.DataContext = contractors; 
            ArticlesDataGrid.DataContext = articles; 
            UnitsDataGrid.DataContext = units;
            AttrClassesDataGrid.DataContext = attrClasses;
            ConfigDataGrid.DataContext = config;
        }

        private void addWarehouseButton_Click(object sender, RoutedEventArgs e)
        {
            // dodac do datagrida i datarow pomalowac na zielono (ze do zapisania) po zapisaniu, dopiero operacja na bazie danych
            DataGridRow row = new DataGridRow();
            row.Background = Brushes.LightGreen;
        }

        private void removeSelected_Click(object sender, RoutedEventArgs e)
        {
            DataGridRow row = e.Source as DataGridRow;
            row.Background = Brushes.Red;
        }

        private void saveChanges_Click(object sender, RoutedEventArgs e)
        {
            IEnumerable<DataGridRow> rowsCollection = mainGrid.Children.OfType<DataGridRow>();
            foreach (DataGridRow row in rowsCollection)
            {
                //if (row.Background = Brushes.LightGreen)
                //{
                //    switch (row.Parent)
                //}
            }
        }

        private void findAttributeButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void DocumentsDataGrid_AddingNewItem(object sender, AddingNewItemEventArgs e)
        {

        }

        private void DocumentsDataGrid_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void DocumentsDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void showDestination_Click(object sender, RoutedEventArgs e)
        {

        }

        private void WarehousesDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {

        }

        private void WarehousesDataGrid_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void WarehousesDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void ContractorsDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void ContractorsDataGrid_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void ArticlesDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void ArticlesDataGrid_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void UnitsDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void addDocumentButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeDocument_Click(object sender, RoutedEventArgs e)
        {

        }

        private void showSender_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeWarehouse_Click(object sender, RoutedEventArgs e)
        {

        }

        private void editWarehouse_Click(object sender, RoutedEventArgs e)
        {

        }

        private void addContractorButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeContractor_Click(object sender, RoutedEventArgs e)
        {

        }

        private void addArticleButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeArticle_Click(object sender, RoutedEventArgs e)
        {

        }

        private void addUnitButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeUnit_Click(object sender, RoutedEventArgs e)
        {

        }

        private void addAttrClassButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeAttrClass_Click(object sender, RoutedEventArgs e)
        {

        }
    }
}
