using Microsoft.EntityFrameworkCore.Migrations.Operations;
using sWMS.DAO;
using sWMS.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using static sWMS.Models.Enums;

namespace sWMS.Windows
{
    /// <summary>
    /// Interaction logic for Attributes.xaml
    /// </summary>
    public partial class MainPanel : Window
    {
        //ObservableCollection<Document> documents;
        DataTable warehouses;
        List<UnsavedChange> unsavedChanges = new List<UnsavedChange>();
        //ObservableCollection<Contractor> contractors;
        //ObservableCollection<Article> articles;
        //ObservableCollection<Unit> units;
        //ObservableCollection<AttrClass> attrClasses;
        //ObservableCollection<Config> config;


        public MainPanel()
        {
            DataAccess.InitializeConnection("(LocalDB)\\MSSQLLocalDB", "sa", "Rambo846303", "sWMS");
            warehouses = Procedures.GetWarehouses();
            InitializeComponent();
            //DocumentsDataGrid.DataContext = documents;
            //WarehousesDataGrid.DataContext = warehouses;
            //ContractorsDataGrid.DataContext = contractors; 
            //ArticlesDataGrid.DataContext = articles; 
            //UnitsDataGrid.DataContext = units;
            //AttrClassesDataGrid.DataContext = attrClasses;
            //ConfigDataGrid.DataContext = config;
        }

        private void addWarehouseButton_Click(object sender, RoutedEventArgs e)
        {
            // Get the element that handled the event.
            FrameworkElement fe = (FrameworkElement)sender;
            Console.WriteLine(fe.Name);
            int Id = warehouses.Rows.Count;
            addNewChange(warehouses, Id, WMSObjectTypesEnum.Warehouse);
        }

        private void addNewChange(DataTable dataTable, int newId, WMSObjectTypesEnum WMSObjectType)
        {
            DataGridRow row = new DataGridRow();
            row.Background = Brushes.LightGreen;
            dataTable.Rows.Add(row);
            UnsavedChange change = new UnsavedChange()
            {
                Id = newId,
                Type = WMSObjectType,
                DataOperation = DataOperationsEnum.Add
            };
            unsavedChanges.Add(change);
        }

        private void onChecked(object sender, RoutedEventArgs e)
        {
            
        }

        private void removeSelected_Click(object sender, RoutedEventArgs e)
        {
            DataGridRow row = e.Source as DataGridRow;
            row.Background = Brushes.Red;
        }

        private void saveChanges_Click(object sender, RoutedEventArgs e)
        {

            //IEnumerable<DataGridRow> rowsCollection = mainGrid.Children.OfType<DataGridRow>();
            //foreach (DataGridRow row in rowsCollection)
            //{
            //    if (row.Background = Brushes.LightGreen)
            //    {
            //        switch (row.Parent.GetValue)
            //        {
            //            case "WarehouseDataGridRow":
            //                Console.WriteLine("WarehouseDtg");
            //            break;
            //        }
            //    }
            //}
        }

        private void findAttributeButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void DocumentsDataGrid_AddingNewItem(object sender, AddingNewItemEventArgs e)
        {

        }

        private void DocumentsDataGrid_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void DocumentsDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void showDestination_Click(object sender, RoutedEventArgs e)
        {

        }

        private void WarehousesDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {

        }

        private void WarehousesDataGrid_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void WarehousesDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void ContractorsDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void ContractorsDataGrid_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void ArticlesDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void ArticlesDataGrid_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {

        }

        private void UnitsDataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {

        }

        private void addDocumentButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeDocument_Click(object sender, RoutedEventArgs e)
        {

        }

        private void showSender_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeWarehouse_Click(object sender, RoutedEventArgs e)
        {

        }

        private void editWarehouse_Click(object sender, RoutedEventArgs e)
        {

        }

        private void addContractorButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeContractor_Click(object sender, RoutedEventArgs e)
        {

        }

        private void addArticleButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeArticle_Click(object sender, RoutedEventArgs e)
        {

        }

        private void addUnitButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeUnit_Click(object sender, RoutedEventArgs e)
        {

        }

        private void addAttrClassButton_Click(object sender, RoutedEventArgs e)
        {

        }

        private void removeAttrClass_Click(object sender, RoutedEventArgs e)
        {

        }
    }
}
